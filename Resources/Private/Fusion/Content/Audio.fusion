prototype(Jonnitto.PrettyEmbedAudio:Content.Audio) < prototype(Jonnitto.PrettyEmbedHelper:Content) {
    package = 'Audio'
    audioFileTypes = ${['mp3', 'wave', 'ogg']}

    assets = ${q(node).property('assets')}
    hasExternalSwitch = ${q(node).is('[instanceof Jonnitto.PrettyEmbedAudio:Mixin.Sources]')}
    external = ${q(node).property('external')}
    externalMp3 = ${q(node).property('externalMp3')}
    externalWave = ${q(node).property('externalWave')}
    externalOgg = ${q(node).property('externalOgg')}

    disableAudioPlayer = ${node.context.inBackend}

    # This enumerated attribute is intended to provide a hint to the browser about what
    # the author thinks will lead to the best user experience with regards to what content
    # is loaded before the video is played. It may have one of the following values:
    #  - none       Indicates that the video should not be preloaded.
    #  - metadata   Indicates that only video metadata (e.g. length) is fetched.
    #  - auto       Indicates that the whole video file can be downloaded, even if the user is not expected to use it
    preload = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'preload'
    }

    # https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio#attr-crossorigin
    crossorigin = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'crossorigin'
    }

    # If true, the browser will offer controls to allow the user to control
    # audio playback, including volume, seeking, and pause/resume playback.
    controls = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'controls'
    }

    # If true, the browser will automatically seek back
    # to the start upon reaching the end of the audio.
    loop = Jonnitto.PrettyEmbedHelper:GetProperty {
        property = 'loop'
    }

    renderer = Neos.Fusion:Component {
        @apply {
            props = ${props}
            overwrite = Neos.Fusion:DataStructure {
                assets = Neos.Fusion:Loop {
                    items = ${props.audioFileTypes}
                    itemName = 'fileextension'
                    itemRenderer = Neos.Fusion:Loop {
                        items = ${props.assets}
                        itemRenderer = Jonnitto.PrettyEmbedAudio:Component.Source {
                            asset = ${item}
                            fileextension = ${fileextension}
                        }
                    }
                }

                external = Neos.Fusion:Loop {
                    items = Neos.Fusion:DataStructure {
                        mp3 = ${Type.isString(props.externalMp3) ? String.trim(props.externalMp3) : null}
                        wave = ${Type.isString(props.externalWave) ? String.trim(props.externalWave) : null}
                        ogg = ${Type.isString(props.externalOgg) ? String.trim(props.externalOgg) : null}
                        @process.filter = ${Array.filter(value)}
                    }
                    itemKey = 'fileextension'
                    itemRenderer = Neos.Fusion:Loop {
                        // Split by line break
                        items = ${String.pregSplit(item, '/\r?\n/')}
                        itemRenderer = Jonnitto.PrettyEmbedAudio:Component.Source {
                            uri = ${String.trim(item)}
                            fileextension = ${fileextension}
                        }
                    }
                }
                sources = ${props.hasExternalSwitch ? (props.external ? this.external : this.assets) : this.assets + this.external}
            }
        }

        renderer = Neos.Fusion:Case {
            noAudio {
                condition = ${!props.sources}
                renderer = afx`<Jonnitto.PrettyEmbedHelper:Notification key='noAudio' default='Please add an audio file or url in the inspector' />`
            }
            default {
                condition = true
                renderer = afx`<Jonnitto.PrettyEmbedAudio:Component.Audio {...props} />`
            }
        }
    }
}
